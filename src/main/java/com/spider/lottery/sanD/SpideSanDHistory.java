package com.spider.lottery.sanD;

import com.spider.lottery.pojo.SanDHistory;
import com.spider.lottery.sanDservice.SandService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.model.annotation.ExtractBy;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.utils.HttpConstant;

import java.io.UnsupportedEncodingException;
import java.util.*;

/**
 * Description：
 *抓取3D网站上历史数据
 * Created with IntelliJ IDEA.
 * User：wang wencong
 * Date：2017/6/26
 * Time：9:34
 * Copyright© 2003-2016 Zhejiang huixin technology company
 */
@Service
public class SpideSanDHistory implements PageProcessor {

   //@Resource(name="SsqService")
    @Autowired
    private SandService sandService;

    private Site site = Site.me().setRetryTimes(3).setSleepTime(1000).setTimeOut(5000).addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.170 Safari/537.36")
              .addHeader("Connection", "keep-alive")
              .setCharset("UTF-8");


    @Override
    public Site getSite() {
        return site;
    }

    @ExtractBy("//div[@class='postDesc']//span[@id='post-date']/text()")
    private String qishuMatch;

    /*生克计算*,相生4 反生3 相克1 反克2 相平0/*/
    public int spicerock(String singDan, String lastsingDan )throws Exception {

        int spicerock = 0;
        //木
        if (singDan.equals("3") || singDan.equals("8")){


            if (lastsingDan.equals("1") || lastsingDan.equals("6")){

                spicerock = 4;

            }
            if (lastsingDan.equals("2") || lastsingDan.equals("7")){

                spicerock = 3;

            }
            if (lastsingDan.equals("4") || lastsingDan.equals("9")){

                spicerock = 1;

            }

            if (lastsingDan.equals("5") || lastsingDan.equals("0")){

                spicerock = 2;

            }
            if (lastsingDan.equals("3") || lastsingDan.equals("8")){

                spicerock = 0;

            }


        }

        //火
        if (singDan.equals("2") || singDan.equals("7")){


            if (lastsingDan.equals("3") || lastsingDan.equals("8")){

                spicerock = 4;

            }
            if (lastsingDan.equals("0") || lastsingDan.equals("5")){

                spicerock = 3;

            }
            if (lastsingDan.equals("1") || lastsingDan.equals("6")){

                spicerock = 1;

            }

            if (lastsingDan.equals("4") || lastsingDan.equals("9")){

                spicerock = 2;

            }
            if (lastsingDan.equals("2") || lastsingDan.equals("7")){

                spicerock = 0;

            }


        }


        //土
        if (singDan.equals("0") || singDan.equals("5")){


            if (lastsingDan.equals("2") || lastsingDan.equals("7")){

                spicerock = 4;

            }
            if (lastsingDan.equals("4") || lastsingDan.equals("9")){

                spicerock = 3;

            }
            if (lastsingDan.equals("3") || lastsingDan.equals("8")){

                spicerock = 1;

            }

            if (lastsingDan.equals("1") || lastsingDan.equals("6")){

                spicerock = 2;

            }
            if (lastsingDan.equals("0") || lastsingDan.equals("5")){

                spicerock = 0;

            }


        }

        //金
        if (singDan.equals("4") || singDan.equals("9")){


            if (lastsingDan.equals("0") || lastsingDan.equals("5")){

                spicerock = 4;

            }
            if (lastsingDan.equals("1") || lastsingDan.equals("6")){

                spicerock = 3;

            }
            if (lastsingDan.equals("2") || lastsingDan.equals("7")){

                spicerock = 1;

            }

            if (lastsingDan.equals("3") || lastsingDan.equals("8")){

                spicerock = 2;

            }
            if (lastsingDan.equals("4") || lastsingDan.equals("9")){

                spicerock = 0;

            }


        }

        //水
        if (singDan.equals("1") || singDan.equals("6")){


            if (lastsingDan.equals("4") || lastsingDan.equals("9")){

                spicerock = 4;

            }
            if (lastsingDan.equals("3") || lastsingDan.equals("8")){

                spicerock = 3;

            }
            if (lastsingDan.equals("0") || lastsingDan.equals("5")){

                spicerock = 1;

            }

            if (lastsingDan.equals("2") || lastsingDan.equals("7")){

                spicerock = 2;

            }
            if (lastsingDan.equals("1") || lastsingDan.equals("6")){

                spicerock = 0;

            }


        }


        return spicerock;

    }



    private int i;

    public int getDcount(){
        return this.i;

    }
    private static final String[] ABCDE = { "125","152","215","251","367","376","512","521","637","673","736","763"};
    private static final String[] BCDE = {"125","152","215","251","367","376","512","521","637","673","736","763"};
    private static final String[] ACDE = {"125","129","134","143","152","192","215","219","236","251","256","263","265",
            "291","314","326","341","362","367","376","413","431","512","521","526","562","623","625","632","637","652",
            "673","736","763","912","921"};
    private static final String[] ABDE = {"123","125","132","152","213","215","231","251","312","321","367","376","512",
            "521","637","673","736","763"};
    private static final String[] ABCE = {"012","021","102","120","125","152","201","210","215","251","345","354","367",
            "376","435","453","512","521","534","543","567","576","637","657","673","675","736","756","763","765","789",
            "798","879","897","978","987"};
    private static final String[] ABCD = {"125","127","128","136","149","152","163","167","172","176","182","194","215",
            "217","218","237","251","271","273","281","316","327","347","361","367","372","374","376","419","437","458",
            "473","485","491","512","521","548","584","589","598","613","617","631","637","671","673","712","716","721",
            "723","732","734","736","743","761","763","812","821","845","854","859","895","914","941","958","985"};
    private static final String[] CDE = {"014","041","104","125","129","134","140","143","152","192","215","219","236",
            "251","256","263","265","291","314","326","341","362","367","376","401","410","413","431","512","521","526",
            "562","623","625","632","637","652","673","736","763","912","921"};
    private static final String[] BDE = {"012","021","102","120","125","152","201","210","215","251","345","354","367",
            "376","435","453","512","521","534","543","567","576","637","657","673","675","736","756","763","765","789",
            "798","879","897","978","987"};
    private static final String[] BCE = {"012","021","102","120","125","152","201","210","215","251","345","354","367",
            "376","435","453","512","521","534","543","567","576","637","657","673","675","736","756","763","765","789",
            "798","879","897","978","987"};
    private static final String[] BCD = {"027","058","072","085","125","127","128","136","147","149","152","158","163",
            "167","168","169","172","174","176","182","185","186","194","196","207","215","217","218","237","251","258",
            "259","270","271","273","281","285","295","316","327","347","361","367","372","374","376","417","419","437",
            "458","469","471","473","485","491","496","508","512","518","521","528","529","548","580","581","582","584",
            "589","592","598","613","617","618","619","631","637","649","671","673","681","691","694","702","712","714",
            "716","720","721","723","732","734","736","741","743","761","763","805","812","815","816","821","825","845",
            "850","851","852","854","859","861","895","914","916","925","941","946","952","958","961","964","985"};
    private static final String[] ADE = {"123","125","129","132","134","143","152","192","213","215","219","231","236",
            "251","256","263","265","291","312","314","321","326","341","362","367","376","413","431","512","521","526",
            "562","623","625","632","637","652","673","736","763","912","921"};
    private static final String[] ACE = {"012","021","102","120","125","129","134","143","152","192","201","210","215",
            "219","236","251","256","263","265","289","291","298","314","326","341","345","354","362","367","376","413",
            "431","435","453","478","487","512","521","526","534","543","562","567","576","623","625","632","637","652",
            "657","673","675","736","748","756","763","765","784","789","798","829","847","874","879","892","897","912",
            "921","928","978","982","987"};
    private static final String[] ACD = {"013","015","016","018","023","029","031","032","051","056","061","065","078",
            "079","081","087","092","097","103","105","106","108","124","125","126","127","128","129","130","134","136",
            "142","143","145","149","150","152","154","156","160","162","163","165","167","172","176","178","180","182",
            "187","189","192","194","198","203","209","214","215","216","217","218","219","230","235","236","237","241",
            "245","251","253", "254","256","261","263","265","267","271","273","276","278","281","287","290","291","301",
            "302","310","314","316","320","325","326","327","341","346","347","352","356","361","362","364","365","367",
            "372","374","376","378","387","412","413","415","419","421","425","431","436","437","451","452","457","458",
            "463","467","473","475","476","479","485","489","491","497","498","501","506","510","512","514","516","521",
            "523","524","526","532","536","541","542","547","548","560","561","562","563","568","574","584","586","589",
            "598","601","605","610","612","613","615","617","621","623","625","627","631","632","634","635","637","643",
            "647","650","651","652","653","658","671","672","673","674","679","685","689","697","698","708","709","712",
            "716","718","721","723","726","728","732","734","736","738","743","745","746","749","754","761","762", "763",
            "764","769","780","781","782","783","790","794","796","801","807","810","812","817","819","821","827","837",
            "845","849","854","856","859","865","869","870","871","872","873","891","894","895","896","902","907","912",
            "914","918","920","921","941","947","948","958","967","968","970","974","976","981","984","985","986"};
    private static final String[] ABE = {"012","021","089","098","102","120","123","125","132","152","201","210","213",
            "215","231","234","243","251","312","321","324","342","345","354","367","376","423","432","435","453","456",
            "465","512","521","534","543","546","564","567","576","637","645","654","657","673","675","678","687","736",
            "756","763","765","768","786","789","798","809","867","876","879","890","897","908","978","980","987"};
    private static final String[] ABD = {"067","069","076","096","123","125","127","128","132","136","149","152","163",
            "167","172","176","182","194","213","215","217","218","231","237","251","271","273","281","312","316","321",
            "327","347","361","367","372","374","376","419","437","458","473","485","491","512","521","548","569","584",
            "589","596","598","607","609","613","617","631","637","659","670","671","673","690","695","706","712","716",
            "721","723","732","734","736","743","760","761","763","812","821","845","854","859","895","906","914","941",
            "956","958","960","965","985"};
    private static final String[] ABC = {"012","017","021","025","052","071","102","107","120","125","127","128","136",
            "146","149","152","163","164","167","170","172","176","182","194","201","205","210","215","217","218","237",
            "247","249","250","251","271","273","274","279","281","294","297","316","327","345","347","354","361","367",
            "372","374","376","416","419","427","429","435","437","453","458","461","472","473","485","491","492","502",
            "512","520","521","534","543","548","567","576","584","589","598","613","614","617","631","637","641","657",
            "671","673","675","701","710","712","716","721","723","724","729","732","734","736","742","743","756","761",
            "763","765","789","792","798","812","821","845","854","859","879","895","897","914","924","927","941","942",
            "958","972","978","985","987"};
    private static final String[] DE = {"014","041","104","123","125","129","132","134","140","143","152","192","213",
            "215","219","231","236","251","256","263","265","291","312","314","321","326","341","362","367","376","401",
            "410","413","431","512","521","526","562","623","625","632","637","652","673","736","763","912","921"};
    private static final String[] CE = {"012","014","021","041","102","104","120","125","129","134","140","143","152",
            "192","201","210","215","219","236","251","256","263","265","289","291","298","314","326","341","345","354",
            "362","367","376","401","410","413","431","435","453","478","487","512","521","526","534","543","562","567",
            "576","623","625","632","637","652","657","673","675","736","748","756","763","765","784","789","798","829",
            "847","874","879","892","897","912","921","928","978","982","987"};
    private static final String[] CD = {"013","014","015","016","018","023","027","029","031","032","034","037","039",
            "041","043","045","047","049","051","054","056","057","058","061","065","072","073","074","075","078","079",
            "081","085","087","092","093","094","097","103","104","105","106","108","124","125","126","127","128","129",
            "130","134","136","140","142","143","145","147","148","149","150","152","154","156","158","160","162","163",
            "165","167","168","169","172","174","176","178","180","182","184","185","186","187","189","192","194","196",
            "198","203","207","209","214","215","216","217","218","219","230","235","236","237","238","239","241","245",
            "251","253","254","256","258","259","261","263","265","267","269","270","271","273","276","278","281","283",
            "285","287","290","291","293","295","296","301","302","304","307","309","310","314","316","320","325","326",
            "327","328","329","340","341","346","347","348","349","352","356","361","362","364","365","367","369","370",
            "372","374","376","378","382","384","387","389","390","392","394","396","398","401","403","405","407","409",
            "410","412","413","415","417","418","419","421","425","430","431","436","437","438","439","450","451","452",
            "457","458","463","467","469","470","471","473","475","476","479","481","483","485","489","490","491","493",
            "496","497","498","501","504","506","507","508","510","512","514","516","518","521","523","524","526","528",
            "529","532","536","540","541","542","547","548","560","561","562","563","568","570","574","580","581","582",
            "584","586","589","592","598","601","605","610","612","613","615","617","618","619","621","623","625","627",
            "629","631","632","634","635","637","639","643","647","649","650","651","652","653","658","671","672","673",
            "674","679","681","685","689","691","692","693","694","697","698","702","703","704","705","708","709","712",
            "714","716","718","720","721","723","726","728","730","732","734","736","738","740","741","743","745","746",
            "749","750","754","761","762","763","764","769","780","781","782","783","790","794","796","801","805","807",
            "810","812","814","815","816","817","819","821","823","825","827","832","834","837","839","841","843","845",
            "849","850","851","852","854","856","859","861","865","869","870","871","872","873","891","893","894","895",
            "896","902","903","904","907","912","914","916","918","920","921","923","925","926","930","932","934","936",
            "938","940","941","943","946","947","948","952","958","961","962","963","964","967","968","970","974","976",
            "981","983","984","985","986"};
    private static final String[] BE = {"012","021","089","098","102","120","123","125","132","152","201","210","213",
            "215","231","234","243","251","312","321","324","342","345","354","367","376","423","432","435","453","456",
            "465","512","521","534","543","546","564","567","576","637","645","654","657","673","675","678","687","736",
            "756","763","765","768","786","789","798","809","867","876","879","890","897","908","978","980","987"};
    private static final String[] BD = {"027","058","067","069","072","076","085","096","123","125","127","128","132",
            "136","147","149","152","158","163","167","168","169","172","174","176","182","185","186","194","196","207",
            "213","215","217","218","231","237","251","258","259","270","271","273","281","285","295","312","316","321",
            "327","347","361","367","372","374","376","417","419","437","458","469","471","473","485","491","496","508",
            "512","518","521","528","529","548","569","580","581","582","584","589","592","596","598","607","609","613",
            "617","618","619","631","637","649","659","670","671","673","681","690","691","694","695","702","706","712",
            "714","716","720","721","723","732","734","736","741","743","760","761","763","805","812","815","816","821",
            "825","845","850","851","852","854","859","861","895","906","914","916","925","941","946","952","956","958",
            "960", "961","964","965","985"};
    private static final String[] BC = {"012","017","021","025","027","035","036","038","052","053","058","063","071",
            "072","083","085","102","107","120","125","127","128","136","138","146","147","149","152","158","163","164",
            "167","168","169","170","172","174","176","182","183","185","186","194","196","201","205","207","210","215",
            "217","218","237","247","249","250","251","258","259","270","271","273","274","279","281","285","294","295",
            "297","305","306","308","316","318","327","345","347","350","354","360","361","367","372","374","376","380",
            "381","416","417","419","427","429","435","437","453","458","461","469","471","472","473","485","491","492",
            "496","502","503","508","512","518","520","521","528","529","530","534","543","548","567","576","580","581",
            "582","584","589","592","598","603","613","614","617","618","619","630","631","637","641","649","657","671",
            "673","675","681","691","694","701","702","710","712","714","716","720","721","723","724","729","732","734",
            "736","741","742","743","756","761","763","765","789","792","798","803","805","812","813","815","816","821",
            "825","830","831","845","850","851","852","854","859","861","879","895","897","914","916","924","925","927",
            "941","942","946","952","958","961","964","972","978","985","987"};
    private static final String[] AE = {"012","019","021","089","091","098","102","109","120","123","125","129","132",
            "134","143","152","190","192","201","210","213","215","219","231","234","236","243","251","256","263","265",
            "289","291","298","312","314","321","324","326","341","342","345","354","362","367","376","413","423","431",
            "432","435","453","456","465","478","487","512","521","526","534","543","546","562","564","567","576","623",
            "625","632","637","645","652","654","657","673","675","678","687","736","748","756","763","765","768","784",
            "786","789","798","809","829","847","867","874","876","879","890","892","897","901","908","910","912","921",
            "928","978","980","982","987"};
    private static final String[] AD = {"013","015","016","018","023","029","031","032","051","056","061","065","067",
            "069","076","078","079","081","087","092","096","097","103","105","106","108","123","124","125","126","127",
            "128","129","130","132","134","136","142","143","145","149","150","152","154","156","160","162","163","165",
            "167","172","176","178","180","182","187","189","192","194","198","203","209","213","214","215","216","217",
            "218","219","230","231","235","236","237","241","245","251","253","254","256","261","263","265","267","271",
            "273","276","278","281","287","290","291","301","302","310","312","314","316","320","321","325","326","327",
            "341","346","347","352","356","361","362","364","365","367","372","374","376","378","387","412","413","415",
            "419","421","425","431","436","437","451","452","457","458","463","467","473","475","476","479","485","489",
            "491","497","498","501","506","510","512","514","516","521","523","524","526","532","536","541","542","547",
            "548","560","561","562","563","568","569","574","584","586","589","596","598","601","605","607","609","610",
            "612","613","615","617","621","623","625","627","631","632","634","635","637","643","647","650","651","652",
            "653","658","659","670","671","672","673","674","679","685","689","690","695","697","698","706","708","709",
            "712","716","718","721","723","726","728","732","734","736","738","743","745","746","749","754","760","761",
            "762","763","764","769","780","781","782","783","790","794","796","801","807","810","812","817","819","821",
            "827","837","845","849","854","856","859","865","869","870","871","872","873","891","894","895","896","902",
            "906","907","912","914","918","920","921","941","947","948","956","958","960","965","967","968","970","974",
            "976","981","984","985","986"};
    private static final String[] AC = {"012","013","015","016","017","018","021","023","025","029","031","032","051",
            "052","056","059","061","065","071","078","079","081","087","092","095","097","102","103","105","106","107",
            "108","120","124","125","126","127","128","129","130","134","136","142","143","145","146","149","150","152",
            "154","156","160","162","163","164","165","167","170","172","176","178","180","182","187","189","192","194",
            "198","201","203","205","209","210","214","215","216","217","218","219","230","235","236","237","241","245",
            "247","249","250","251","253","254","256","257","261","263","265","267","271","273","274","275","276","278",
            "279","281","287","289","290","291","294","297","298","301","302","310","314","316","320","325","326","327",
            "341","345","346","347","352","354","356","361","362","364","365","367","368","372","374","376","378","386",
            "387","412","413","415","416","419","421","425","427","429","431","435","436","437","451","452","453","457",
            "458","459","461","463","467","472","473","475","476","478","479","485","487","489","491","492","495","497",
            "498","501","502","506","509","510","512","514","516","520","521","523","524","526","527","532","534","536",
            "541","542","543","547","548","549","560","561","562","563","567","568","572","574","576","578","584","586",
            "587","589","590","594","598","601","605","610","612","613","614","615","617","621","623","625","627","631",
            "632","634","635","637","638","641","643","647","650","651","652","653","657","658","671","672","673","674",
            "675","679","683","685","689","697","698","701","708","709","710","712","716","718","721","723","724","725",
            "726","728","729","732","734","736","738","742","743","745","746","748","749","752","754","756","758","761",
            "762","763","764","765","769","780","781","782","783","784","785","789","790","792","794","796","798","801",
            "807","810","812","817","819","821","827","829","836","837","845","847","849","854","856","857","859","863",
            "865","869","870","871","872","873","874","875","879","891","892","894","895","896","897","902","905","907",
            "912","914","918","920","921","924","927","928","941","942","945","947","948","950","954","958","967","968",
            "970","972","974","976","978","981","982","984","985","986","987"};
    private static final String[] AB = {"012","017","021","025","052","067","069","071","076","089","096","098","102",
            "107","120","123","125","127","128","132","136","146","149","152","163","164","167","170","172","176","182",
            "194","201","205","210","213","215","217","218","231","234","237","243","247","249","250","251","271","273",
            "274","279","281","294","297","312","316","321","324","327","342","345","347","354","361","367","372","374",
            "376","416","419","423","427","429","432","435","437","453","456","458","461","465","472","473","485","491",
            "492","502","512","520","521","534","543","546","548","564","567","569","576","584","589","596","598","607",
            "609","613","614","617","631","637","641","645","654","657","659","670","671","673","675","678","687","690",
            "695","701","706","710","712","716","721","723","724","729","732","734","736","742","743","756","760","761",
            "763","765","768","786","789","792","798","809","812","821","845","854","859","867","876","879","890","895",
            "897","906","908","914","924","927","941","942","956","958","960","965","972","978","980","985","987"};
    private static final String[] E = {"012","014","019","021","024","026","028","041","042","046","048","062","064",
            "068","082","084","086","089","091","098","102","104","109","120","123","125","129","132","134","135","137",
            "139","140","143","152","153","157","159","173","175","179","190","192","193","195","197","201","204","206",
            "208","210","213","215","219","231","234","236","240","243","246","248","251","256","260","263","264","265",
            "268","280","284","286","289","291","298","312","314","315","317","319","321","324","326","341","342","345",
            "351","354","357","359","362","367","371","375","376","379","391","395","397","401","402","406","408","410",
            "413","420","423","426","428","431","432","435","453","456","460","462","465","468","478","480","482","486",
            "487","512","513","517","519","521","526","531","534","537","539","543","546","562","564","567","571","573",
            "576","579","591","593","597","602","604","608","620","623","624","625","628","632","637","640","642","645",
            "648","652","654","657","673","675","678","680","682","684","687","713","715","719","731","735","736","739",
            "748","751","753","756","759","763","765","768","784","786","789","791","793","795","798","802","804","806",
            "809","820","824","826","829","840","842","846","847","860","862","864","867","874","876","879","890","892",
            "897","901","908","910","912","913","915","917","921","928","931","935","937","951","953","957","971","973",
            "975","978","980","982","987"};
    private static final String[] D = {"013","014","015","016","018","023","027","029","031","032","034","037","039",
            "041","043","045","047","049","051","054","056","057","058","061","065","067","069","072","073","074","075",
            "076","078","079","081","085","087","092","093","094","096","097","103","104","105","106","108","123","124",
            "125","126","127","128","129","130","132","134","136","140","142","143","145","147","148","149","150","152",
            "154","156","158","160","162","163","165","167","168","169","172","174","176","178","180","182","184","185",
            "186","187","189","192","194","196","198","203","207","209","213","214","215","216","217","218","219","230",
            "231","235","236","237","238","239","241","245","251","253","254","256","258","259","261","263","265","267",
            "269","270","271","273","276","278","281","283","285","287","290","291","293","295","296","301","302","304",
            "307","309","310","312","314","316","320","321","325","326","327","328","329","340","341","346","347","348",
            "349","352","356","361","362","364","365","367","369","370","372","374","376","378","382","384","387","389",
            "390","392","394","396","398","401","403","405","407","409","410","412","413","415","417","418","419","421",
            "425","430","431","436","437","438","439","450","451","452","457","458","463","467","469","470","471","473",
            "475","476","479","481","483","485","489","490","491","493","496","497","498","501","504","506","507","508",
            "510","512","514","516","518","521","523","524","526","528","529","532","536","540","541","542","547","548",
            "560","561","562","563","568","569","570","574","580","581","582","584","586","589","592","596","598","601",
            "605","607","609","610","612","613","615","617","618","619","621","623","625","627","629","631","632","634",
            "635","637","639","643","647","649","650","651","652","653","658","659","670","671","672","673","674","679",
            "681","685","689","690","691","692","693","694","695","697","698","702","703","704","705","706","708","709",
            "712","714","716","718","720","721","723","726","728","730","732","734","736","738","740","741","743","745",
            "746","749","750","754","760","761","762","763","764","769","780","781","782","783","790","794","796","801",
            "805","807","810","812","814","815","816","817","819","821","823","825","827","832","834","837","839","841",
            "843","845","849","850","851","852","854","856","859","861","865","869","870","871","872","873","891","893",
            "894","895","896","902","903","904","906","907","912","914","916","918","920","921","923","925","926","930",
            "932","934","936","938","940","941","943","946","947","948","952","956","958","960","961","962","963","964",
            "965","967","968","970","974","976","981","983","984","985","986"};
    private static final String[] C = {"012","013","014","015","016","017","018","021","023","025","027","029","031",
            "032","034","035","036","037","038","039","041","043","045","047","049","051","052","053","054","056","057",
            "058","059","061","063","065","071","072","073","074","075","078","079","081","083","085","087","092","093",
            "094","095","097","102","103","104","105","106","107","108","120","124","125","126","127","128","129","130",
            "134","136","138","140","142","143","145","146","147","148","149","150","152","154","156","158","160","162",
            "163","164","165","167","168","169","170","172","174","176","178","180","182","183","184","185","186","187",
            "189","192","194","196","198","201","203","205","207","209","210","214","215","216","217","218","219","230",
            "235","236","237","238","239","241","245","247","249","250","251","253","254","256","257","258","259","261",
            "263","265","267","269","270","271","273","274","275","276","278","279","281","283","285","287","289","290",
            "291","293","294","295","296","297","298","301","302","304","305","306","307","308","309","310","314","316",
            "318","320","325","326","327","328","329","340","341","345","346","347","348","349","350","352","354","356",
            "358","360","361","362","364","365","367","368","369","370","372","374","376","378","380","381","382","384",
            "385","386","387","389","390","392","394","396","398","401","403","405","407","409","410","412","413","415",
            "416","417","418","419","421","425","427","429","430","431","435","436","437","438","439","450","451","452",
            "453","457","458","459","461","463","467","469","470","471","472","473","475","476","478","479","481","483",
            "485","487","489","490","491","492","493","495","496","497","498","501","502","503","504","506","507","508",
            "509","510","512","514","516","518","520","521","523","524","526","527","528","529","530","532","534","536",
            "538","540","541","542","543","547","548","549","560","561","562","563","567","568","570","572","574","576",
            "578","580","581","582","583","584","586","587","589","590","592","594","598","601","603","605","610","612",
            "613","614","615","617","618","619","621","623","625","627","629","630","631","632","634","635","637","638",
            "639","641","643","647","649","650","651","652","653","657","658","671","672","673","674","675","679","681",
            "683","685","689","691","692","693","694","697","698","701","702","703","704","705","708","709","710","712",
            "714","716","718","720","721","723","724","725","726","728","729","730","732","734","736","738","740","741",
            "742","743","745","746","748","749","750","752","754","756","758","761","762","763","764","765","769","780",
            "781","782","783","784","785","789","790","792","794","796","798","801","803","805","807","810","812","813",
            "814","815","816","817","819","821","823","825","827","829","830","831","832","834","835","836","837","839",
            "841","843","845","847","849","850","851","852","853","854","856","857","859","861","863","865","869","870",
            "871","872","873","874","875","879","891","892","893","894","895","896","897","902","903","904","905","907",
            "912","914","916","918","920","921","923","924","925","926","927","928","930","932","934","936","938","940",
            "941","942","943","945","946","947","948","950","952","954","958","961","962","963","964","967","968","970",
            "972","974","976","978","981","982","983","984","985","986","987"};
    private static final String[] B = {"012","017","021","025","027","035","036","038","052","053","058","063","067",
            "069","071","072","076","083","085","089","096","098","102","107","120","123","125","127","128","132","136",
            "138","146","147","149","152","158","163","164","167","168","169","170","172","174","176","182","183","185",
            "186","194","196","201","205","207","210","213","215","217","218","231","234","237","243","247","249","250",
            "251","258","259","270","271","273","274","279","281","285","294","295","297","305","306","308","312","316",
            "318","321","324","327","342","345","347","350","354","360","361","367","372","374","376","380","381","416",
            "417","419","423","427","429","432","435","437","453","456","458","461","465","469","471","472","473","485",
            "491","492","496","502","503","508","512","518","520","521","528","529","530","534","543","546","548","564",
            "567","569","576","580","581","582","584","589","592","596","598","603","607","609","613","614","617","618",
            "619","630","631","637","641","645","649","654","657","659","670","671","673","675","678","681","687","690",
            "691","694","695","701","702","706","710","712","714","716","720","721","723","724","729","732","734","736",
            "741","742","743","756","760","761","763","765","768","786","789","792","798","803","805","809","812","813",
            "815","816","821","825","830","831","845","850","851","852","854","859","861","867","876","879","890","895",
            "897","906","908","914","916","924","925","927","941","942","946","952","956","958","960","961","964","965",
            "972","978","980","985","987"};
    private static final String[] A = {"012","013","015","016","017","018","019","021","023","025","029","031","032",
            "051","052","056","059","061","065","067","069","071","076","078","079","081","087","089","091","092","095",
            "096","097","098","102","103","105","106","107","108","109","120","123","124","125","126","127","128","129",
            "130","132","134","136","142","143","145","146","149","150","152","154","156","160","162","163","164","165",
            "167","170","172","176","178","180","182","187","189","190","192","194","198","201","203","205","209","210",
            "213","214","215","216","217","218","219","230","231","234","235","236","237","241","243","245","247","249",
            "250","251","253","254","256","257","261","263","265","267","271","273","274","275","276","278","279","281",
            "287","289","290","291","294","297","298","301","302","310","312","314","316","320","321","324","325","326",
            "327","341","342","345","346","347","352","354","356","361","362","364","365","367","368","372","374","376",
            "378","386","387","412","413","415","416","419","421","423","425","427","429","431","432","435","436","437",
            "451","452","453","456","457","458","459","461","463","465","467","472","473","475","476","478","479","485",
            "487","489","491","492","495","497","498","501","502","506","509","510","512","514","516","520","521",
            "523","524","526","527","532","534","536","541","542","543","546","547","548","549","560","561","562","563",
            "564","567","568","569","572","574","576","578","584","586","587","589","590","594","596","598","601","605",
            "607","609","610","612","613","614","615","617","621","623","625","627","631","632","634","635","637","638",
            "641","643","645","647","650","651","652","653","654","657","658","659","670","671","672","673","674","675",
            "678","679","683","685","687","689","690","695","697","698","701","706","708","709","710","712","716","718",
            "721","723","724","725","726","728","729","732","734","736","738","742","743","745","746","748","749","752",
            "754","756","758","760","761","762","763","764","765","768","769","780","781","782","783","784","785","786",
            "789","790","792","794","796","798","801","807","809","810","812","817","819","821","827","829","836","837",
            "845","847","849","854","856","857","859","863","865","867","869","870","871","872","873","874","875","876",
            "879","890","891","892","894","895","896","897","901","902","905","906","907","908","910","912","914","918",
            "920","921","924","927","928","941","942","945","947","948","950","954","956","958","960","965","967","968",
            "970","972","974","976","978","980","981","982","984","985","986","987"};


    @Override
    public void process(Page page) {

        List<String> qishulist = page.getHtml().css("table").regex("<td>[0-9]{7}</td>")
                .replace("<td>","").replace("</td>","").all();
        page.putField("qishulist",qishulist);

//        String qishuMatch1 = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[1]/td[2]/text()").get();
        loop1:for ( i=0;i<qishulist.size();i++)
        {
            String qishuMatch = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr["+(qishulist.size()-i)+"]/td[1]/text()").get();

            if(qishuMatch.equals("2002001") ) {
                if (qishuMatch.equals(qishulist.get(qishulist.size() - i - 1))) {
                    String qishudate = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[2]/text()").get();
                    //   System.out.println(qishudate);
                    String sanDhao = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[4]/a/text()").get();
                    String shijihao = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[3]/font/text()").get();
                    String[] sanDsplit = sanDhao.split("");
                    String[] shijihaosplit = shijihao.split(",");
                    String baihund = sanDsplit[1].toString();
                    String shidecade = sanDsplit[3].toString();
                    String gesingle = sanDsplit[5].toString();
                    String sjbaihund = shijihaosplit[0].toString();
                    String sjshidecade = shijihaosplit[1].toString();
                    String sjgesingle = shijihaosplit[2].toString();
                    String sanDV = baihund + shidecade + gesingle;
                    String shijiDV = sjbaihund + sjshidecade + sjgesingle;

                    int sanDsum = Integer.parseInt(baihund) + Integer.parseInt(shidecade) + Integer.parseInt(gesingle);
                    int shijiDsum = Integer.parseInt(sjbaihund) + Integer.parseInt(sjshidecade) + Integer.parseInt(sjgesingle);
                    int sanDgc = Integer.parseInt(sanDV) + 1;

                    List<Integer> list3D = new ArrayList<Integer>();
                    list3D.add(Integer.parseInt(baihund));
                    list3D.add(Integer.parseInt(shidecade));
                    list3D.add(Integer.parseInt(gesingle));
                    int sanDkd = Collections.max(list3D) - Collections.min(list3D);

                    List<Integer> listshijiD = new ArrayList<Integer>();
                    listshijiD.add(Integer.parseInt(sjbaihund));
                    listshijiD.add(Integer.parseInt(sjshidecade));
                    listshijiD.add(Integer.parseInt(sjgesingle));
                    int shijiDkd = Collections.max(listshijiD) - Collections.min(listshijiD);


                    String flagBai = "0";
                    if (baihund.equals(sjbaihund)) {

                        flagBai = "1";

                    }

                    List<Integer> list3Drv = new ArrayList<Integer>();
                    list3Drv.add(Integer.parseInt(baihund));
                    list3Drv.add(Integer.parseInt(shidecade));
                    list3Drv.add(Integer.parseInt(gesingle));
                    list3Drv.add(Integer.parseInt(sjbaihund));
                    list3Drv.add(Integer.parseInt(sjshidecade));
                    list3Drv.add(Integer.parseInt(sjgesingle));

                    String flagContain = "0";


                    if (!hasSame(list3Drv)) {
                        flagContain = "1";
                    }


                    // System.out.println(red1+" "+red2+" "+red3+" "+red4+" "+red5+" "+red6+"+"+blue);
                    String xingtai3D = "1";
                    String xingtaisj = "1";
                    if (baihund.equals(shidecade) && baihund.equals(gesingle) && shidecade.equals(gesingle)) {
                        xingtai3D = "3";
                    } else if (baihund.equals(shidecade) || baihund.equals(gesingle) || shidecade.equals(gesingle)) {
                        xingtai3D = "2";
                    } else {
                        xingtai3D = "1";
                    }

                    if (sjbaihund.equals(sjshidecade) && sjbaihund.equals(sjgesingle) && sjshidecade.equals(sjgesingle)) {
                        xingtaisj = "3";
                    } else if (sjbaihund.equals(sjshidecade) && sjbaihund.equals(sjgesingle) && sjshidecade.equals(sjgesingle)) {
                        xingtaisj = "2";
                    } else {
                        xingtaisj = "1";
                    }

                    int mtstat = 0;
                    if (xingtai3D.equals("2") || xingtai3D.equals("3")) {

                        mtstat = 32;

                    } else if (Arrays.asList(ABCDE).contains(sanDV)) {
                        mtstat = 29;
                    } else if (Arrays.asList(BCDE).contains(sanDV)) {
                        mtstat = 28;
                    } else if (Arrays.asList(ACDE).contains(sanDV)) {
                        mtstat = 27;
                    } else if (Arrays.asList(ABDE).contains(sanDV)) {
                        mtstat = 26;
                    } else if (Arrays.asList(ABCE).contains(sanDV)) {
                        mtstat = 25;
                    } else if (Arrays.asList(ABCD).contains(sanDV)) {
                        mtstat = 24;
                    } else if (Arrays.asList(CDE).contains(sanDV)) {
                        mtstat = 23;
                    } else if (Arrays.asList(BCE).contains(sanDV)) {
                        mtstat = 22;
                    } else if (Arrays.asList(BCD).contains(sanDV)) {
                        mtstat = 21;
                    } else if (Arrays.asList(ADE).contains(sanDV)) {
                        mtstat = 20;
                    } else if (Arrays.asList(ACE).contains(sanDV)) {
                        mtstat = 19;
                    } else if (Arrays.asList(ACD).contains(sanDV)) {
                        mtstat = 18;
                    } else if (Arrays.asList(ABE).contains(sanDV)) {
                        mtstat = 17;
                    } else if (Arrays.asList(ABD).contains(sanDV)) {
                        mtstat = 16;
                    } else if (Arrays.asList(ABC).contains(sanDV)) {
                        mtstat = 15;
                    } else if (Arrays.asList(DE).contains(sanDV)) {
                        mtstat = 14;
                    } else if (Arrays.asList(CE).contains(sanDV)) {
                        mtstat = 13;
                    } else if (Arrays.asList(CD).contains(sanDV)) {
                        mtstat = 12;
                    } else if (Arrays.asList(BE).contains(sanDV)) {
                        mtstat = 11;
                    } else if (Arrays.asList(BC).contains(sanDV)) {
                        mtstat = 10;
                    } else if (Arrays.asList(AE).contains(sanDV)) {
                        mtstat = 9;
                    } else if (Arrays.asList(AD).contains(sanDV)) {
                        mtstat = 8;
                    } else if (Arrays.asList(AC).contains(sanDV)) {
                        mtstat = 7;
                    } else if (Arrays.asList(AB).contains(sanDV)) {
                        mtstat = 6;
                    } else if (Arrays.asList(E).contains(sanDV)) {
                        mtstat = 5;
                    } else if (Arrays.asList(D).contains(sanDV)) {
                        mtstat = 4;
                    } else if (Arrays.asList(C).contains(sanDV)) {
                        mtstat = 3;
                    } else if (Arrays.asList(B).contains(sanDV)) {
                        mtstat = 2;
                    } else if (Arrays.asList(A).contains(sanDV)) {
                        mtstat = 1;
                    }

                    int baispice = 0;
                    int sjbaispice = 0;
                    int shispice = 0;
                    int sjshispice = 0;
                    int gespice = 0;
                    int sjgespice = 0;


                    SanDHistory sanDhistory = new SanDHistory();
                    sanDhistory.setIssue(qishuMatch);
                    sanDhistory.setDate(qishudate);
                    sanDhistory.setSanD(sanDhao);
                    sanDhistory.setShijiD(shijihao);
                    sanDhistory.setBaihund(baihund);
                    sanDhistory.setShidecade(shidecade);
                    sanDhistory.setGesingle(gesingle);
                    sanDhistory.setSjbaihund(sjbaihund);
                    sanDhistory.setSjshidecade(sjshidecade);
                    sanDhistory.setSjgesingle(sjgesingle);
                    sanDhistory.setXingtai3D(xingtai3D);
                    sanDhistory.setXingtaisj(xingtaisj);
                    sanDhistory.setSanDV(sanDV);
                    sanDhistory.setShijiDV(shijiDV);
                    sanDhistory.setSanDsum(sanDsum);
                    sanDhistory.setSanDgc(sanDgc);
                    sanDhistory.setSanDkd(sanDkd);
                    sanDhistory.setFlagBai(flagBai);
                    sanDhistory.setFlagContain(flagContain);
                    sanDhistory.setMtstat(mtstat);
                    sanDhistory.setShijiDsum(shijiDsum);
                    sanDhistory.setShijiDkd(shijiDkd);

                    sanDhistory.setBaispice(baispice);
                    sanDhistory.setSjbaispice(sjbaispice);
                    sanDhistory.setShispice(shispice);
                    sanDhistory.setSjshispice(sjshispice);
                    sanDhistory.setGespice(gespice);
                    sanDhistory.setSjgespice(sjgespice);

                    list3D.clear();
                    listshijiD.clear();
                    list3Drv.clear();

                    if(sandService == null){
                        System.out.println("数据服务空异常");
                    }

                    int ssqhisR = sandService.insertSanDHistory(sanDhistory);
                }
                else {

                    System.out.println("期数不匹配,当前期数为"+qishuMatch);
                    break loop1;
                }
            }else {

                    if (qishuMatch.equals(qishulist.get(qishulist.size() - i - 1))) {
                        String qishudate = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[2]/text()").get();
                        //   System.out.println(qishudate);
                        String sanDhao = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[4]/a/text()").get();
                        String shijihao = page.getHtml().xpath("/html/body/div/table/tbody[2]/tr[" + (qishulist.size() - i) + "]/td[3]/font/text()").get();
                        String[] sanDsplit = sanDhao.split("");
                        String[] shijihaosplit = shijihao.split(",");
                        String baihund = sanDsplit[1].toString();
                        String shidecade = sanDsplit[3].toString();
                        String gesingle = sanDsplit[5].toString();
                        String sjbaihund = shijihaosplit[0].toString();
                        String sjshidecade = shijihaosplit[1].toString();
                        String sjgesingle = shijihaosplit[2].toString();
                        String sanDV = baihund + shidecade + gesingle;
                        String shijiDV = sjbaihund + sjshidecade + sjgesingle;

                        int sanDsum = Integer.parseInt(baihund) + Integer.parseInt(shidecade) + Integer.parseInt(gesingle);
                        int shijiDsum = Integer.parseInt(sjbaihund) + Integer.parseInt(sjshidecade) + Integer.parseInt(sjgesingle);
                        int sanDgc = Integer.parseInt(sanDV) + 1;

                        List<Integer> list3D = new ArrayList<Integer>();
                        list3D.add(Integer.parseInt(baihund));
                        list3D.add(Integer.parseInt(shidecade));
                        list3D.add(Integer.parseInt(gesingle));
                        int sanDkd = Collections.max(list3D) - Collections.min(list3D);

                        List<Integer> listshijiD = new ArrayList<Integer>();
                        listshijiD.add(Integer.parseInt(sjbaihund));
                        listshijiD.add(Integer.parseInt(sjshidecade));
                        listshijiD.add(Integer.parseInt(sjgesingle));
                        int shijiDkd = Collections.max(listshijiD) - Collections.min(listshijiD);


                        String flagBai = "0";
                        if (baihund.equals(sjbaihund)) {

                            flagBai = "1";

                        }

                        List<Integer> list3Drv = new ArrayList<Integer>();
                        list3Drv.add(Integer.parseInt(baihund));
                        list3Drv.add(Integer.parseInt(shidecade));
                        list3Drv.add(Integer.parseInt(gesingle));
                        list3Drv.add(Integer.parseInt(sjbaihund));
                        list3Drv.add(Integer.parseInt(sjshidecade));
                        list3Drv.add(Integer.parseInt(sjgesingle));

                        String flagContain = "0";


                        if (!hasSame(list3Drv)) {
                            flagContain = "1";
                        }


                        // System.out.println(red1+" "+red2+" "+red3+" "+red4+" "+red5+" "+red6+"+"+blue);
                        String xingtai3D = "1";
                        String xingtaisj = "1";
                        if (baihund.equals(shidecade) && baihund.equals(gesingle) && shidecade.equals(gesingle)) {
                            xingtai3D = "3";
                        } else if (baihund.equals(shidecade) || baihund.equals(gesingle) || shidecade.equals(gesingle)) {
                            xingtai3D = "2";
                        } else {
                            xingtai3D = "1";
                        }

                        if (sjbaihund.equals(sjshidecade) && sjbaihund.equals(sjgesingle) && sjshidecade.equals(sjgesingle)) {
                            xingtaisj = "3";
                        } else if (sjbaihund.equals(sjshidecade) && sjbaihund.equals(sjgesingle) && sjshidecade.equals(sjgesingle)) {
                            xingtaisj = "2";
                        } else {
                            xingtaisj = "1";
                        }

                        int mtstat = 0;
                        if (xingtai3D.equals("2") || xingtai3D.equals("3")) {

                            mtstat = 32;

                        } else if (Arrays.asList(ABCDE).contains(sanDV)) {
                            mtstat = 29;
                        } else if (Arrays.asList(BCDE).contains(sanDV)) {
                            mtstat = 28;
                        } else if (Arrays.asList(ACDE).contains(sanDV)) {
                            mtstat = 27;
                        } else if (Arrays.asList(ABDE).contains(sanDV)) {
                            mtstat = 26;
                        } else if (Arrays.asList(ABCE).contains(sanDV)) {
                            mtstat = 25;
                        } else if (Arrays.asList(ABCD).contains(sanDV)) {
                            mtstat = 24;
                        } else if (Arrays.asList(CDE).contains(sanDV)) {
                            mtstat = 23;
                        } else if (Arrays.asList(BCE).contains(sanDV)) {
                            mtstat = 22;
                        } else if (Arrays.asList(BCD).contains(sanDV)) {
                            mtstat = 21;
                        } else if (Arrays.asList(ADE).contains(sanDV)) {
                            mtstat = 20;
                        } else if (Arrays.asList(ACE).contains(sanDV)) {
                            mtstat = 19;
                        } else if (Arrays.asList(ACD).contains(sanDV)) {
                            mtstat = 18;
                        } else if (Arrays.asList(ABE).contains(sanDV)) {
                            mtstat = 17;
                        } else if (Arrays.asList(ABD).contains(sanDV)) {
                            mtstat = 16;
                        } else if (Arrays.asList(ABC).contains(sanDV)) {
                            mtstat = 15;
                        } else if (Arrays.asList(DE).contains(sanDV)) {
                            mtstat = 14;
                        } else if (Arrays.asList(CE).contains(sanDV)) {
                            mtstat = 13;
                        } else if (Arrays.asList(CD).contains(sanDV)) {
                            mtstat = 12;
                        } else if (Arrays.asList(BE).contains(sanDV)) {
                            mtstat = 11;
                        } else if (Arrays.asList(BC).contains(sanDV)) {
                            mtstat = 10;
                        } else if (Arrays.asList(AE).contains(sanDV)) {
                            mtstat = 9;
                        } else if (Arrays.asList(AD).contains(sanDV)) {
                            mtstat = 8;
                        } else if (Arrays.asList(AC).contains(sanDV)) {
                            mtstat = 7;
                        } else if (Arrays.asList(AB).contains(sanDV)) {
                            mtstat = 6;
                        } else if (Arrays.asList(E).contains(sanDV)) {
                            mtstat = 5;
                        } else if (Arrays.asList(D).contains(sanDV)) {
                            mtstat = 4;
                        } else if (Arrays.asList(C).contains(sanDV)) {
                            mtstat = 3;
                        } else if (Arrays.asList(B).contains(sanDV)) {
                            mtstat = 2;
                        } else if (Arrays.asList(A).contains(sanDV)) {
                            mtstat = 1;
                        }

/*
                        String lastbai = "0";
                        String lastshi = "0";
                        String lastsingle = "0";
                        String lastsjbai = "0";
                        String lastsjshi = "0";
                        String lastsjsingle = "0";
*/



                            List<SanDHistory> His =sandService.selectSanDhisSpice();
                            String lastbai=His.get(0).getBaihund();
                            String lastshi=His.get(0).getShidecade();
                            String lastsingle=His.get(0).getGesingle();

                            String lastsjbai=His.get(0).getSjbaihund();
                            String lastsjshi=His.get(0).getSjshidecade();
                            String lastsjsingle=His.get(0).getSjgesingle();








                        int baispice = 0;
                        int sjbaispice = 0;
                        int shispice = 0;
                        int sjshispice = 0;
                        int gespice = 0;
                        int sjgespice = 0;


                        try {
                             baispice = spicerock(baihund,lastbai);
                             sjbaispice = spicerock(sjbaihund,lastsjbai);
                             shispice = spicerock(shidecade,lastshi);
                             sjshispice = spicerock(sjshidecade,lastsjshi);
                             gespice = spicerock(gesingle,lastsingle);
                             sjgespice = spicerock(sjgesingle,lastsjsingle);
                        } catch (Exception e) {


                            e.printStackTrace();

                        }


                        SanDHistory sanDhistory = new SanDHistory();
                        sanDhistory.setIssue(qishuMatch);
                        sanDhistory.setDate(qishudate);
                        sanDhistory.setSanD(sanDhao);
                        sanDhistory.setShijiD(shijihao);
                        sanDhistory.setBaihund(baihund);
                        sanDhistory.setShidecade(shidecade);
                        sanDhistory.setGesingle(gesingle);
                        sanDhistory.setSjbaihund(sjbaihund);
                        sanDhistory.setSjshidecade(sjshidecade);
                        sanDhistory.setSjgesingle(sjgesingle);
                        sanDhistory.setXingtai3D(xingtai3D);
                        sanDhistory.setXingtaisj(xingtaisj);
                        sanDhistory.setSanDV(sanDV);
                        sanDhistory.setShijiDV(shijiDV);
                        sanDhistory.setSanDsum(sanDsum);
                        sanDhistory.setSanDgc(sanDgc);
                        sanDhistory.setSanDkd(sanDkd);
                        sanDhistory.setFlagBai(flagBai);
                        sanDhistory.setFlagContain(flagContain);
                        sanDhistory.setMtstat(mtstat);
                        sanDhistory.setShijiDsum(shijiDsum);
                        sanDhistory.setShijiDkd(shijiDkd);

                        sanDhistory.setBaispice(baispice);
                        sanDhistory.setSjbaispice(sjbaispice);
                        sanDhistory.setShispice(shispice);
                        sanDhistory.setSjshispice(sjshispice);
                        sanDhistory.setGespice(gespice);
                        sanDhistory.setSjgespice(sjgespice);

                        list3D.clear();
                        listshijiD.clear();
                        list3Drv.clear();

                        if(sandService == null){
                            System.out.println("数据服务空异常");
                        }

                        int ssqhisR = sandService.insertSanDHistory(sanDhistory);

                    }
                    else {

                        System.out.println("期数不匹配,当前期数为"+qishuMatch);
                        break loop1;
                    }



            }
            //  System.out.println(ssqhistory);



            //    System.out.println(ssqhisR);

            }

    }





    private static boolean hasSame(List<? extends Object> list){

        if(null == list) {
            return false;
        }
        return list.size() == new HashSet<Object>(list).size();
    }

    public void pushData() throws Exception {
        //设置POST请求
        Request request = new Request("http://kaijiang.78500.cn/3dshijihao/");
        //只有POST请求才可以添加附加参数
        request.setMethod(HttpConstant.Method.POST);
        //设置POST参数

        Map<String, Object> Params = new HashMap<String, Object>();
        Params.put("startqi", "2018001");
        Params.put("endqi", "2018176");
        Params.put("year", "2002");
        Params.put("action", "range");

        try {
            request.setRequestBody(HttpRequestBody.form(Params, "utf-8"));
            Spider.create(this).thread(5)
                    .addRequest(request)
                    .addPipeline(new ConsolePipeline())
                    .run();
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    public static void main(String []args){


        //设置POST请求
        Request request = new Request("http://kaijiang.78500.cn/3dshijihao/");
        //只有POST请求才可以添加附加参数
        request.setMethod(HttpConstant.Method.POST);


        //设置POST参数

        Map<String,Object> Params = new HashMap<String,Object>();
        Params.put("startqi","2012001");
        Params.put("endqi","2012173");
        Params.put("year","2012");
        Params.put("action","range");

        try {
            request.setRequestBody(HttpRequestBody.form(Params,"utf-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }


        try {
            Spider.create(new SpideSanDHistory()).thread(1)
                    .addRequest(request)
                    .addPipeline(new ConsolePipeline())
                    .run();
        }
        catch(Exception e) {
            e.printStackTrace();
        }




    }



}


